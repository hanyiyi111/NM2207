# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv("cat-lovers.csv")
# Compute the mean of the number of cats: execute this command
mean(cat_lovers$number_of_cats)
# Get more information about the mean() command using ? operator
?mean
# Convert the variable number_of_cats using as.integer()
mean(as.integer(cat_lovers$number_of_cats))
# Display the elements of the column number_of_cats
cat_lovers$number_of_cats
# Display the elements of the column number_of_cats after converting it using as.numeric()
as.integer(cat_lovers$number_of_cats)
# Empty vector
x <- vector()
# Type of the empty vector
typeof(x)
# Method 1
x<-vector("logical",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-logical(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(TRUE,FALSE,TRUE,FALSE,TRUE)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("character",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-character(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c('A','b','r','q')
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("integer",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-integer(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(1L,2L,3L,4L,5L)
# Display the contents of x
print(x)
# Display the type of x\
print(typeof(x))
# Method 4
x<-seq(from=1L,to=5L,by=1L)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 5
x<-1:5
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("double",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-double(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(1.787,0.63573,2.3890)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Create a vector
x <- c(1.8)
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(x,'a')
# Check the type of x
typeof(x)
# Create a vector
x <- c(TRUE)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c('a')
# Check the type of x
typeof(x)
# Add a logical value to the vector
x <- c(x,TRUE)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Convert the vector to type character
x <- as.character(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c('A')
# Check the type of x
typeof(x)
# Convert the vector to type double
x <- as.numeric(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
x[3]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[2:4]
# Access elements with non-consecutive indices, 1,3,5
x[c(1,3,5)]
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using the conditional operator <
x[x<10]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Install package
install.packages("openintro")
install.packages("openintro")
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade,state,homeownership,disbursement_method) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade,state,homeownership,disbursement_method) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade,state,homeownership,disbursement_method) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade,state,homeownership,disbursement_method) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("openintro")
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Load package tidyverse
library(tidyverse)
# Load package tidyverse
library(tidyverse)
# Load package tidyverse
library(tidyverse)
install.packages("openintro", repos="http://cran.us.r-project.org")
install.packages("openintro", repos = "http://cran.us.r-project.org")
knitr::opts_chunk$set(echo = TRUE)
# Method 4
x<-seq(from=1,to=5,by=1)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1,to=5,by=1L)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1,to=5L,by=1L)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1L,to=5L,by=1L)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Load package
library(tidyverse)
# Install package
install.packages("openintro", repos="http://cran.us.r-project.org")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Load package
library(tidyverse)
# Load package
library(tidyverse)
# Load package
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
ages <- c(25,30,22,28,33)
print(ages)
# Enter code here
student_info = list(name="Alice","Bob","Catherine", score=85,92,78, passed.the.exam=TRUE,TRUE,FALSE)
print(student_info)
# Enter code here
a <- c(10)
typeof(a)
b <- c(15.5)
typeof(b)
c <- c("20")
typeof(c)
d <- c(TRUE)
typeof(d)
# Enter code here
prices <- c(20.5,15,"25")
prices <- as.double(prices)
typeof(prices)
# Enter code here
prices <- c(20.5,15,"25")
prices <- as.double(prices)
typeof(prices)
print(prices)
# Enter code here
x <- c(5,10,15)
x <- c(x,"apple","banana","cherry")
typeof(x)
# Enter code here
numbers <- c(7,12.5)
numbers <- c(numbers,"15.7")
typepf(numbers)
# Enter code here
numbers <- c(7,12.5)
numbers <- c(numbers,"15.7")
typeof(numbers)
# Enter code here
numbers <- c(7,12.5)
numbers <- c(numbers,"15.7")
typeof(numbers)
numbers <- as.double(numbers)
# Enter code here
numbers <- c(7,12.5)
numbers <- c(numbers,"15.7")
typeof(numbers)
numbers <- as.double(numbers)
typepf(numbers)
# Enter code here
numbers <- c(7,12.5)
numbers <- c(numbers,"15.7")
typeof(numbers)
numbers <- as.double(numbers)
typeof(numbers)
# Enter code here
numbers <- c(7,12.5)
numbers <- c(numbers,"15.7")
typeof(numbers)
numbers <- as.double(numbers)
typeof(numbers)
sum(numbers)
# Enter code here
grades <- c(85,90.5)
grades <- c(grades,"75.2")
grades <- as.double(grades)
mean(grades)
# Enter code here
mixed_data = list(numeric=10,20,30, character="red","green","blue", logical=TRUE,FALSE,TRUE)
mean(numeric)
mixed_data = list(numeric=10,20,30, character="red","green","blue", logical=TRUE,FALSE,TRUE)
mixed_data
mixed_data = list(numeric=c(10,20,30), character=c("red","green","blue"), logical=c(TRUE,FALSE,TRUE))
mixed_data
mixed_data$numeric
mean(mixed_data$numeric)
# Enter code here
student_info = list(name=c("Alice","Bob","Catherine"), score=c(85,92,78), passed.the.exam=c(TRUE,TRUE,FALSE))
print(student_info)
# Enter code here
mixed_data = list(numeric=c(10,20,30), character=c("red","green","blue"), logical=c(TRUE,FALSE,TRUE))
mixed_data$numeric
mean(mixed_data$numeric)
# Enter code here
student_info <- student_info %>%
select(Bob)
# Enter code here
Bob.score <- student_info %>% # <-- pipe operator
select(score)
# Enter code here
x<-double(5)
x[5]
# Enter code here
words <- c("apple","banana","cherry","apple")
x[c(TRUE,FALSE,FALSE,TRUE)]
# Enter code here
words <- c("apple","banana","cherry","apple")
words[c(TRUE,FALSE,FALSE,TRUE)]
# Enter code here
student_info$score %>% # <-- pipe operator
# Enter code here
student_info$score  # <-- pipe operator
# Enter code here
student_info$score[student_info$name=="Bob"]  # <-- pipe operator
# Enter code here
student_info$score[student_info$name!="Bob"]  # <-- pipe operator
# Enter code here
student_info$score[student_info$score>90]  # <-- pipe operator
# Enter code here
student_info$score[student_info$score==Bob]  # <-- pipe operator
# Enter code here
student_info$score[student_info$name==Bob]  # <-- pipe operator
# Enter code here
student_info$score[student_info$name==Bob]  # <-- pipe operator
# Enter code here
student_info$score[student_info$name ==Bob]  # <-- pipe operator
# Enter code here
student_info$score[student_info$name==Bob]  # <-- pipe operator
# Enter code here
ages
ages[ages<30]
x<-c(T, F, T, F)
x
which(x)
x <- c("A", "B", "A", "C")
x == "A"
which(x == "A")
# Enter code here
student_info$score[student_info$name=="Bob"]  # <-- pipe operator
# Enter code here
words <- c("apple","banana","cherry","apple")
words == "apple"
which(words == "apple")
# Enter code here
x<-double(20)
print(x)
# Enter code here
x<-double(20)
x[by3]
# Enter code here
x<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
x[1:20, by=3]
# Enter code here
x<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
x[1:20, by=3]
# Enter code here
x <- c(1,2,3,4,5,6,7,8,9,10)
x[4,8]
# Enter code here
x <- c(1,2,3,4,5,6,7,8,9,10)
x[c(4,8)]
# Enter code here
x<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
x[c(1:20, by=3)]
# Enter code here
x<-c(10,NA,15,20)
x[c(2)]
# Enter code here
temperatures<-c(85,88,91,93,79,98,85,92)
hot_days<-c(temperatures$degree>90)
# Enter code here
temperatures<-c(85,88,91,93,79,98,85,92)
hot_days<-c(temperatures[temperatures$degree>90])
# Enter code here
temperatures<-c(85,88,91,93,79,98,85,92)
hot_days<-c(temperatures>90])
# Enter code here
temperatures<-c(85,88,91,93,79,98,85,92)
hot_days<-c(temperatures>90)
# Enter code here
temperatures<-c(85,88,91,93,79,98,85,92)
hot_days<-c(TRUE[temperatures>90])
# Enter code here
ages
ages[ages>30]
# Enter code here
ages
ages[ages>30]
# Enter code here
ages[ages>30]
# Enter code here
x<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
x<-seq(from=1,to=20,by=3)
# Enter code here
x<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
x<-seq(from=1,to=20,by=3)
# Enter code here
x<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
x<-seq(from=1,to=20,by=3)
print(x)
temperatures<-c(85,88,91,93,79,98,85,92)
hot_days<-temperatures>90
hot_days
sum(hot_days)
?nchar
nchar("apple")
# Enter code here
temperatures<-c(85,88,91,93,79,98,85,92)
hot_days<-temperatures>90
hot_days
sum(hot_days)
# Enter code here
fruits <-c("apple","strawberry","blueberry","banana")
long_fruit_names<-fruits(nchar>6)
# Enter code here
fruits <-c("apple","strawberry","blueberry","banana")
long_fruit_names<-fruits[nchar>6]
# Enter code here
fruits <-c("apple","strawberry","blueberry","banana")
long_fruit_names<-fruits[nchar[fruits>6]]
# Enter code here
fruits <-c("apple","strawberry","blueberry","banana")
long_fruit_names<-fruits[nchar[fruits>6]]
# Enter code here
fruits <-c("apple","strawberry","blueberry","banana")
long_fruit_names<-fruits[nchar(fruits)>6]
# Enter code here
fruits <-c("apple","strawberry","blueberry","banana")
long_fruit_names<-fruits[nchar(fruits)>6]
# Enter code here
fruits <-c("apple","strawberry","blueberry","banana")
long_fruit_names<-fruits[nchar(fruits)>6]
print(long_fruit_names)
# Enter code here
x<-(4,5,10,8,11)
# Enter code here
x<-(45,10,8,11)
# Enter code here
x <-(45,10,8,11)
# Enter code here
x <-(45,10,8,11)
# Enter code here
x <-(45,10,8,11)
# Enter code here
x <-(45,10,8,11)
# Enter code here
x <-(45,10,8,11)
# Enter code here
x <-(10,8,11)
10 %% 2
9 %% 2
9 %% 5
# Enter code here
x <-(10,8,11)
# Enter code here
x <-c(10,8,11)
divisible_by_5<-x[(x %% 5)==0]
print(divisible_by_5)
x <- 1:10
x
x > 1
x > 2:11
# Enter code here
x <-c(3,3,5,6,7,8)
y <-c(5,6,3,1,3,5)
x>y
# Enter code here
x<-c(6.7.8.2.6)
# Enter code here
x<-c(6,7,8,2,6)
x[length(x)]
