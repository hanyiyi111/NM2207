knitr::opts_chunk$set(echo = TRUE)
# Enter code here
for (x in c(3, 6, 9)) {
print(x)
}
# Left-hand side code: for loop for passing values
for (x in 1:8) {print(x)}
# Right-hand side code: for loop for passing indices
for (x in 1:8)
{y <- seq(from=100,to=200,by=5)
print(y[x])}
# Example 3 for data_type=double
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
sample_means
# Enter code here
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
sample_means
sample_means <- vector("double", length = 5)
sample_means <- double(5)
sample_means <- rep(0, length(sample_sizes))
sample_means <- vector("double", length = 5)
sample_means <- double(5)
sample_means <- rep(0, length(sample_sizes))
# Initialisation of data_list
data_list <- vector("list", length = 5)
# Example: bad idea!
a <- 7:11
b <- 8:12
out <- rep(0L, 5)
for (i in seq_along(a)) {
out[i] <- a[i] + b[i]
}
out
# Taking advantage of vectorization
a <- 7:11
b <- 8:12
out <- a + b
out
# Slide 23
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Compute median
sample_summary(sample_sizes,median)
# Compute sd
sample_summary(sample_sizes,sd)
# Left-hand side code: for loop
for(i in 1:5){
print(i)
}
# Right-hand side code: while loop
i <- 1
while (i <= 5) {
print(i)
i <- i + 1
}
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
reverseWord <- function(word) {
reversed <- ""
index <- nchar(word)
while (index > 0) {
reversed <- paste(reversed, substr(word, index, index), sep = "")
index <- index - 1
}
return(reversed)
}
word <- readline("Enter a word: ")
reversed_word <- reverseWord(word)
cat("Reversed word:", reversed_word, "\n")
# Enter code here
import time
# Enter code here
countdown = 10
while countdown > 0:
# Enter code here
countdown=10
while [ $countdown -gt 0 ]; do
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
countdown <- function(seconds) {
for (i in seconds:1) {
cat(i, "\n")
Sys.sleep(1)
}
cat("Blastoff!\n")
}
countdown(10)
# Enter code here
reverseWord <- function(word) {
reversed <- ""
index <- nchar(word)
while (index > 0) {
reversed <- paste(reversed, substr(word, index, index), sep = "")
index <- index - 1
}
return(reversed)
}
word <- readline("Enter a word: ")
reversed_word <- reverseWord(word)
cat("Reversed word:", reversed_word, "\n")
